"use strict";
var React = require('react')
var moment = require('moment')
var _ = require('lodash-node')

var TileNumber = require('tile-number')
var TileWeeks = require('tile-weeks')
var TileProgress = require('tile-progress')

var Dashboard = React.createClass({

  getInitialState() {
    var { records } = this.props
    var recordsByYear = _.groupBy(records, (record) => moment(record.date).year())
    var years = _.keys(recordsByYear).map(Number)
    var year = +location.hash.slice(1)
    year = (year && years.indexOf(year) > -1 ) ? year : moment(records[records.length-1].date).year()
    return _.merge({ recordsByYear, years }, this.getRecordsOfYear(year, recordsByYear[year]))
  },

  getRecordsOfYear(year, records) {
    records = this.state ? this.state.recordsByYear[year] : records
    var recordsOfYear = records || []
    var lastRecordOfYear = recordsOfYear[recordsOfYear.length-1] ? recordsOfYear[recordsOfYear.length-1].date : false

    return {
      year: year,
      total: {
        weight: recordsOfYear.reduce((sum, record) => sum + ( record.weight*record.repetitions || 0 ), 0),
        repetitions: recordsOfYear.reduce((sum, record) => sum + ( record.repetitions || 0), 0),
        days: _(recordsOfYear).pluck('date').uniq().value().length,
        workoutsPerWeek: _(recordsOfYear)
          .groupBy(record => moment(record.date).week())
          .mapValues(records => _(records).pluck('date').uniq().value().length)
          .value(),
        performancePerDay: _(recordsOfYear)
          .filter('weight')
          .groupBy('date')
          .map(records => _(records)
            .groupBy('exercise')
            .reduce((sum, sets) => sum + _(sets) .reduce((performance, set) => performance + (set.repetitions*0.1)+(0.9*set.weight/sets.length), 0), 0))
          .map(performance => Math.round(performance*1000)/1000)
          .value()
      },
      latest: {
        day: lastRecordOfYear ? moment(lastRecordOfYear).format('DD.MM.') : 'none'
      }
    }
  },

  setYear(year) {
    this.setState(this.getRecordsOfYear(year))
  },

  render() {
    var { total, latest, year, years } = this.state
    return (
      <div className="dashboard">
        <TileNumber number={total.days} label="days of workout" />
        <TileNumber number={total.weight} label="kilos lifted" />
        <TileNumber number={total.repetitions} label="repetitions" />
        <TileNumber number={latest.day} label="last recorded workout" />
        <TileWeeks
          year={year}
          years={years}
          weeks={moment(year+'-01-01').weeksInYear()}
          workoutsPerWeek={total.workoutsPerWeek}
          previousYear={this.setYear.bind(this, year-1)}
          nextYear={this.setYear.bind(this, year+1)} />
        <TileProgress data={{
          labels: total.performancePerDay,
          series: [ { data: total.performancePerDay } ]
        }} />
      </div>
    )
  }

})

module.exports = Dashboard
